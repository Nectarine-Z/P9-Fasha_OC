/*
 * Author: Francoise Zimmer
 * description : Trigger handling class
 * Handler Class containing the methods that will be called by the Trigger :
 *  Trigger 1 before : Logical to calculate the net amount earned (without shipping costs) of the order.
 *  Trigger 2 after : logical to update the chiffre d'affaire after receiving the new orders) on the concerned Accounts.
 * 	Logique 3 : Logic to update all Accounts that have a command with status ordered.
*/ 

public class AP01Account { // handler du trigger Order
    /**Updating the chiffre d'affaire of accounts that have received a new order.
     * @param : orders. List of orders to be updated.
     */
    public static void updateChiffreAffaireDeL_Account(List<Order> orders) {
        Set<Id> AccountOrderId = new Set<ID>();
        for (order o : orders){
            AccountOrderId.add(o.Accountid);
        }

        List<Account> accToUpdate = new List<Account>();	
        
        Map<id,Account> accMap = new Map<id,Account>([select id, Chiffre_d_affaire__c from account where id in : AccountOrderId]);
        
        AggregateResult[] groupedResults= [SELECT Accountid, SUM(TotalAmount)CA FROM Order where Status = 'Ordered' and AccountId in : AccountOrderId group by AccountId];
        
        for (AggregateResult r : groupedResults){
            ID accountID = (id)r.get('AccountID');
            Account a = accMap.get(accountid);
            a.Chiffre_d_affaire__c = (Decimal) r.get('CA');
            accToUpdate.add(a);
        }
        update accToUpdate;
 }
    /**Updating orders without shipement costs.
     * @param : orders. List of orders to be updated.
     */
    public static void updateMontantCommandeSansFraisDeLivraison(List<Order> orders){
        
        // Iterate over each sObject - here Order
        for (Order o:orders){
            // calculate the net amount of the order (without shipping costs).
            if (o.ShipmentCost__c != null){
                o.NetAmount__c = o.TotalAmount - o.ShipmentCost__c;
            }
           }     
    }
    
    /**Updating the chiffre d'affaire of all accounts that have received a new order.
     * @param : AccLst. List of accounts to be updated.
     */
    public static void updateChiffreAffaire(List<Account> accLst){
      
        // creation of a new List of all Accounts.
        List<Account> AllAccToUpdate = new List<Account>();
        // creation of a new list of all orders with the status Ordered.
       list<Order> listOrders =  [SELECT Id, TotalAmount, AccountId FROM Order WHERE status ='Ordered'];
        // Iterate over each sObject - here Account.
       for(Account myAccount : accLst){
           // Reset of the Chiffre d'affaire.
		   myAccount.Chiffre_d_affaire__c = 0;
           // Iterate over each sObject - here Order
           for(Order ord : listOrders){
               // if the order id number matches the account id number.
               if(ord.AccountId == myAccount.Id){
                   // Add the total amount of the new order placed
                   // (including shipping costs) to the Chiffre d'affaire of the account concerned.
                   myAccount.Chiffre_d_affaire__c += ord.TotalAmount;
               }                   
           }
           
           AllAccToUpdate.add(myAccount);
       }
       // update of All Accounts.
       update AllAccToUpdate;
    }
}